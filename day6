NUMPY- import numpy as np

In data science, we dont use traditional python, we use scientific python. The compilation of data and its analysis is a deal in itself.
So, scientific python eases the usage of coding part into more reliable and easy interface. 

Numpy is one of those libraries which helps us in achieving the desried outputs and helps in cultivating better codes with higher 
optimization.
import numpy as np  


Numpy was designed to adress the missing values, it itself supports "nan" but lacks cross platform support with python and makes 
it tough for the user . Comparing values within python gets tough for the user.

OPERATING AND INSTALLATION CONCERNS-

the sytsem should support upto 1gb ram memory, using python.org. Update installation setups and download numpy library for
smooth working afterwards.

NUMPY ARRAY AND OBJECTS-

  Python objects:	
   high-level number objects: integers, floating point
   containers: lists (costless insertion and append), dictionaries (fast lookup)
  NumPy provides:	
   extension package to Python for multi-dimensional arrays
   closer to hardware (efficiency)
   designed for scientific computation (convenience)
   Also known as array oriented computing

>>>import numpy as np

ARRAY CREATION

>>>a = np.array([0, 1, 2, 3])
>>>a
array([0,1,2,3])


INDEXING AND SLICING-

>>> a = np.array(10)
>>>a
array([0,1,2,3,4,5,6,7,8,9])
>>>a[0], a[2], a[-1]
0,2,9

>>>a = np.array(10)
>>>a
array([0,1,2,3,4,5,6,7,8,9])
>>>a[2:9:3]
array([2,5,8])
>>>a[:4]
array([0,1,2,3])

ARRAY DATA TYPES-

>>>a = np.array([1,2,3]
>>>a.dtype
dtype ('int64')

>>>b = np.array([1. , 2. ,  3.])
>>>b.dtype
dtype ('float64')

COPYING AND VIEWING-

>>> a = np.array(10)
>>>a
array([0,1,2,3,4,5,6,7,8,9])

>>>b = a[::2]
>>>b
array([0,2,4,6,8])

>>>np.may_share_memeory(a,b)
True

>>>b[0] = 12
>>>b
array([12,2,4,6,8])

>>>a #(!)
array([12,1,2,3,4,5,6,7,8,9])
